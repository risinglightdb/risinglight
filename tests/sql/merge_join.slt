statement ok
create table t1(a int, b int);

statement ok
create table t2(c int, d int);

statement ok
insert into t1 values (1, 10), (1, 11), (2, 20);

statement ok
insert into t2 values (1, -10), (1, -11), (3, -30);

query IIII
select *
from (select a, b from t1 order by a, b) 
join (select c, d from t2 order by c, d desc) on a = c;
----
1 10 1 -10
1 10 1 -11
1 11 1 -10
1 11 1 -11

query IIII
select *
from (select a, b from t1 order by a) 
left join (select c, d from t2 order by c) on a = c;
----
1 10 1    -10 
1 10 1    -11 
1 11 1    -10 
1 11 1    -11 
2 20 NULL NULL

query IIII
select *
from (select a, b from t1 order by a) 
right join (select c, d from t2 order by c) on a = c;
----
1    10   1 -10
1    10   1 -11
1    11   1 -10
1    11   1 -11
NULL NULL 3 -30

query IIII
select *
from (select a, b from t1 order by a) 
full join (select c, d from t2 order by c) on a = c;
----
1    10   1    -10 
1    10   1    -11 
1    11   1    -10 
1    11   1    -11 
2    20   NULL NULL
NULL NULL 3    -30 

statement ok
drop table t1;

statement ok
drop table t2;

# In the following tests, the join is on the primary key.
# In memory storage, tables are unordered, it would use hash join.
# In disk storage, tables are ordered by the primary key, it would use merge join.

statement ok
create table t1(a int primary key, b int);

statement ok
create table t2(c int primary key, d int);

statement ok
insert into t1 values (3, 30), (2, 20), (1, 10);

statement ok
insert into t2 values (2, -20), (1, -10), (3, -30);

query IIII rowsort
select * from t1 join t2 on a = c;
----
1 10 1 -10
2 20 2 -20
3 30 3 -30

statement ok
drop table t1;

statement ok
drop table t2;
